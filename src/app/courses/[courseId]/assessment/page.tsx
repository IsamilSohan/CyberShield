
"use client";

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { AssessmentForm } from '@/components/assessment/AssessmentForm';
import Link from 'next/link';
import { ArrowLeft, Loader2 } from 'lucide-react';
import type { Course, Quiz, Certificate } from '@/lib/types';
import { auth, db } from '@/lib/firebase';
import { onAuthStateChanged, type User as FirebaseUser } from 'firebase/auth';
import { doc, getDoc, updateDoc, arrayUnion, serverTimestamp } from 'firebase/firestore';
import { useToast } from '@/hooks/use-toast';

export default function AssessmentPage() {
  const router = useRouter();
  const params = useParams<{ courseId: string }>();
  const courseId = params.courseId;
  const { toast } = useToast();

  const [currentUser, setCurrentUser] = useState<FirebaseUser | null>(null);
  const [course, setCourse] = useState<Course | null>(null);
  const [quiz, setQuiz] = useState<Quiz | null>(null);
  const [isLoadingPage, setIsLoadingPage] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setCurrentUser(user);
        async function fetchData() {
          if (!courseId) {
            setIsLoadingPage(false);
            setCourse(null);
            setQuiz(null);
            return;
          }
          try {
            // 1. Fetch Course
            const courseRef = doc(db, "courses", courseId as string);
            const courseSnap = await getDoc(courseRef);

            if (!courseSnap.exists()) {
              setCourse(null);
              setQuiz(null);
              toast({ title: "Error", description: "Course not found.", variant: "destructive" });
              setIsLoadingPage(false);
              return;
            }
            const fetchedCourse = { id: courseSnap.id, ...courseSnap.data() } as Course;
            setCourse(fetchedCourse);

            // 2. Fetch Quiz using quizId from course
            if (fetchedCourse.quizId) {
              const quizRef = doc(db, "quizzes", fetchedCourse.quizId);
              const quizSnap = await getDoc(quizRef);
              if (quizSnap.exists()) {
                setQuiz({ id: quizSnap.id, ...quizSnap.data() } as Quiz);
              } else {
                setQuiz(null);
                toast({ title: "Error", description: "Quiz not found for this course.", variant: "destructive" });
              }
            } else {
              setQuiz(null);
              toast({ title: "Information", description: "No quiz is associated with this course yet.", variant: "default" });
            }
          } catch (error) {
            console.error("Error fetching course/quiz:", error);
            toast({ title: "Error", description: "Could not load assessment data.", variant: "destructive" });
            setCourse(null);
            setQuiz(null);
          } finally {
            setIsLoadingPage(false);
          }
        }
        fetchData();
      } else {
        router.push(`/auth/login?redirect=/courses/${courseId}/assessment`);
      }
    });
    return () => unsubscribe();
  }, [router, courseId, toast]);

  const handleQuizSubmit = async (answers: Record<string, string>) => {
    if (!quiz || !quiz.questions || !currentUser || !course) return;
    setIsSubmitting(true);

    let score = 0;
    quiz.questions.forEach(q => {
      const selectedOptionIndex = parseInt(answers[`question_${q.id}`], 10); // Assuming answer value is option index as string
      if (selectedOptionIndex === q.correctOptionIndex) {
        score++;
      }
    });

    const percentage = (score / quiz.questions.length) * 100;

    if (percentage >= 80) {
      toast({
        title: "Quiz Passed!",
        description: `You scored ${percentage.toFixed(0)}%. Certificate granted.`,
      });
      try {
        const userRef = doc(db, "users", currentUser.uid);
        const newCertificate: Partial<Certificate> = { // Partial because id is generated by Firestore or pre-generated
          courseId: course.id,
          courseTitle: course.title,
          userId: currentUser.uid,
          userName: currentUser.displayName || currentUser.email || 'User',
          issueDate: new Date().toISOString(),
          // certificateUrl: can be generated/stored later if needed
        };
        
        // Generate a unique ID for the certificate or let Firestore do it if it's a subcollection
        // For simplicity, adding to an array; a subcollection might be better for querying.
        // We need a unique ID for the certificate object if stored in an array.
        const certificateId = `cert-${course.id}-${currentUser.uid}-${Date.now()}`;
        const certificateWithId: Certificate = { ...newCertificate, id: certificateId } as Certificate;


        await updateDoc(userRef, {
          certificates: arrayUnion(certificateWithId)
        });
        router.push(`/courses/${courseId}/certificate?certId=${certificateId}`);
      } catch (error) {
        console.error("Error granting certificate:", error);
        toast({ title: "Error", description: "Could not save certificate information.", variant: "destructive" });
      }
    } else {
      toast({
        title: "Quiz Failed",
        description: `You scored ${percentage.toFixed(0)}%. Please try again.`,
        variant: "destructive",
      });
    }
    setIsSubmitting(false);
  };


  if (isLoadingPage) {
    return (
      <div className="flex justify-center items-center min-h-[calc(100vh-10rem)]">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <p className="ml-2">Loading assessment...</p>
      </div>
    );
  }

  if (!currentUser) return null; // Should be redirected

  if (!course) {
     return (
      <div className="space-y-6">
        <Link href="/" className="inline-flex items-center text-primary hover:underline">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Courses
        </Link>
        <p className="text-center text-destructive-foreground bg-destructive p-4 rounded-md">Course data could not be loaded.</p>
      </div>
    );
  }
  
  if (!quiz) {
    return (
      <div className="space-y-6">
        <Link href={`/courses/${courseId}`} className="inline-flex items-center text-primary hover:underline">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Course: {course.title}
        </Link>
        <p className="text-center text-muted-foreground bg-muted p-4 rounded-md">No quiz available for this course.</p>
      </div>
    );
  }


  return (
    <div className="space-y-8">
       <Link href={`/courses/${courseId}`} className="inline-flex items-center text-primary hover:underline mb-6">
        <ArrowLeft className="mr-2 h-4 w-4" />
        Back to Course: {course.title}
      </Link>
      <AssessmentForm quiz={quiz} courseId={courseId} onSubmit={handleQuizSubmit} isSubmitting={isSubmitting} />
    </div>
  );
}
